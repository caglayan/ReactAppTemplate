{"ast":null,"code":"import _objectWithoutProperties from \"/Users/caglayanserbetci/Desktop/miuul/miuul/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/caglayanserbetci/Desktop/miuul/miuul/src/Dialogs/SnackBar.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n\n  const className = props.className,\n        message = props.message,\n        onClose = props.onClose,\n        variant = props.variant,\n        other = _objectWithoutProperties(props, [\"className\", \"message\", \"onClose\", \"variant\"]);\n\n  const Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired\n};\nconst useStyles2 = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\nexport default function CustomizedSnackbars(props) {\n  const classes = useStyles2();\n\n  const snackWrapperContent = (type, message) => {\n    if (props.type == 1) {\n      return React.createElement(MySnackbarContentWrapper, {\n        onClose: props.closeSnack,\n        variant: \"Ba\\u015Far\\u0131l\\u0131\",\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    } else if (props.type == 2) {\n      return React.createElement(MySnackbarContentWrapper, {\n        variant: \"Hata\",\n        className: classes.margin,\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    } else if (props.type == 3) {\n      return React.createElement(MySnackbarContentWrapper, {\n        variant: \"Uyar\\u0131\",\n        className: classes.margin,\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    } else if (props.type == 4) {\n      return React.createElement(MySnackbarContentWrapper, {\n        variant: \"Bilgi\",\n        className: classes.margin,\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    open: props.isActive,\n    autoHideDuration: 6000,\n    onClose: props.closeSnack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, snackWrapperContent(props.type, props.message)));\n}","map":{"version":3,"sources":["/Users/caglayanserbetci/Desktop/miuul/miuul/src/Dialogs/SnackBar.js"],"names":["React","PropTypes","clsx","Button","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","variantIcon","success","warning","error","info","useStyles1","theme","backgroundColor","palette","dark","primary","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","propTypes","string","func","oneOf","isRequired","useStyles2","margin","CustomizedSnackbars","snackWrapperContent","type","closeSnack","vertical","horizontal","isActive"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\nconst useStyles2 = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function CustomizedSnackbars(props) {\n  const classes = useStyles2();   \n\n  const snackWrapperContent = (type,message) => {\n    if(props.type == 1){\n        return <MySnackbarContentWrapper\n        onClose={props.closeSnack}\n        variant=\"Başarılı\"\n        message={message}\n        />\n    }else if(props.type == 2){\n        return <MySnackbarContentWrapper\n        variant=\"Hata\"\n        className={classes.margin}\n        message={message}\n      />\n    }else if(props.type == 3){\n        return <MySnackbarContentWrapper\n        variant=\"Uyarı\"\n        className={classes.margin}\n        message={message}\n      />\n    }else if(props.type==4){\n        return <MySnackbarContentWrapper\n        variant=\"Bilgi\"\n        className={classes.margin}\n        message={message}\n      />\n    } \n  }\n\n  return (\n    <div>      \n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={props.isActive}\n        autoHideDuration={6000}\n        onClose={props.closeSnack}\n      >\n        {\n            snackWrapperContent(props.type,props.message)\n        }        \n      </Snackbar>                 \n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}