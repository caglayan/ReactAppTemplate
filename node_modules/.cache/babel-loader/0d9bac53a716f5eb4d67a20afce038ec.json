{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _plyr = _interopRequireDefault(require(\"plyr\"));\n\nvar _defaultProps = _interopRequireDefault(require(\"./defaultProps\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass Plyr extends _react.Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n\n    _defineProperty(this, \"player\", null);\n\n    _defineProperty(this, \"elementRef\", new _react.default.createRef());\n\n    _defineProperty(this, \"state\", {\n      muted: null\n    });\n\n    _defineProperty(this, \"getType\", () => this.player && this.player.source && this.player.source.type);\n\n    _defineProperty(this, \"play\", () => this.player && this.player.play());\n\n    _defineProperty(this, \"pause\", () => this.player && this.player.pause());\n\n    _defineProperty(this, \"togglePlay\", () => this.player && this.player.togglePlay());\n\n    _defineProperty(this, \"stop\", () => this.player && this.player.stop());\n\n    _defineProperty(this, \"restart\", () => this.player && this.player.restart());\n\n    _defineProperty(this, \"rewind\", time => this.player && this.player.rewind(time));\n\n    _defineProperty(this, \"forward\", time => this.player && this.player.forward(time));\n\n    _defineProperty(this, \"getCurrentTime\", () => this.player && this.player.currentTime);\n\n    _defineProperty(this, \"setCurrentTime\", currentTime => this.player.currentTime = currentTime);\n\n    _defineProperty(this, \"getDuration\", () => this.player && this.player.duration);\n\n    _defineProperty(this, \"getVolume\", () => this.player && this.player.volume);\n\n    _defineProperty(this, \"isMuted\", () => this.player && this.player.muted);\n\n    _defineProperty(this, \"isPaused\", () => this.player && this.player.paused);\n\n    _defineProperty(this, \"toggleMute\", () => this.player && this.player.toggleControls(this.player.muted));\n\n    _defineProperty(this, \"setMuted\", function () {\n      let muted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return _this.player.muted = muted;\n    });\n\n    _defineProperty(this, \"increaseVolume\", step => this.player && this.player.increaseVolume(step));\n\n    _defineProperty(this, \"decreaseVolume\", step => this.player && this.player.decreaseVolume(step));\n\n    _defineProperty(this, \"setVolume\", amount => this.player.volume = amount);\n\n    _defineProperty(this, \"enterFullscreen\", () => this.player && this.player.fullscreen.enter());\n\n    _defineProperty(this, \"exitFullscreen\", () => this.player && this.player.fullscreen.exit());\n\n    _defineProperty(this, \"toggleFullscreen\", () => this.player && this.player.fullscreen.toggle());\n\n    _defineProperty(this, \"updateVideoSource\", (videoId, provider) => {\n      this.player.source = {\n        type: 'video',\n        sources: [{\n          src: videoId,\n          provider\n        }]\n      };\n    });\n\n    _defineProperty(this, \"renderPlayerWithVideoId\", () => {\n      return _react.default.createElement(\"div\", {\n        className: this.props.className,\n        style: this.props.style,\n        \"data-plyr-provider\": this.props.type,\n        \"data-plyr-embed-id\": this.props.videoId,\n        ref: this.elementRef\n      });\n    });\n\n    _defineProperty(this, \"renderPlayerWithSRC\", () => {\n      const _this$props = this.props,\n            sources = _this$props.sources,\n            url = _this$props.url,\n            preload = _this$props.preload,\n            poster = _this$props.poster,\n            className = _this$props.className,\n            tracks = _this$props.tracks;\n      const captionsMap = tracks.map((source, index) => {\n        const _source$key = source.key,\n              key = _source$key === void 0 ? index : _source$key,\n              _source$kind = source.kind,\n              kind = _source$kind === void 0 ? 'captions' : _source$kind,\n              label = source.label,\n              src = source.src,\n              srclang = source.srclang,\n              def = source.default,\n              attributes = _objectWithoutProperties(source, [\"key\", \"kind\", \"label\", \"src\", \"srclang\", \"default\"]);\n\n        return _react.default.createElement(\"track\", _extends({\n          key: key,\n          kind: kind,\n          label: label,\n          src: src,\n          srclang: srclang,\n          default: def\n        }, attributes, {\n          ref: this.elementRef\n        }));\n      });\n\n      if (sources && Array.isArray(sources) && sources.length) {\n        return _react.default.createElement(\"video\", {\n          className: className,\n          preload: preload,\n          poster: poster,\n          ref: this.elementRef\n        }, sources.map((source, index) => _react.default.createElement(\"source\", {\n          key: index,\n          src: source.src,\n          type: source.type,\n          size: source.size && source.size\n        })), captionsMap);\n      }\n\n      return _react.default.createElement(\"video\", {\n        className: className,\n        src: url,\n        preload: preload,\n        poster: poster,\n        ref: this.elementRef\n      }, captionsMap);\n    });\n\n    _defineProperty(this, \"renderAudioPlayer\", () => {\n      const _this$props2 = this.props,\n            sources = _this$props2.sources,\n            url = _this$props2.url,\n            preload = _this$props2.preload,\n            className = _this$props2.className;\n\n      if (sources && Array.isArray(sources) && sources.length) {\n        return _react.default.createElement(\"audio\", {\n          className: className,\n          preload: preload,\n          ref: this.elementRef\n        }, sources.map((source, index) => _react.default.createElement(\"source\", {\n          key: index,\n          src: source.src,\n          type: source.type\n        })));\n      }\n\n      return _react.default.createElement(\"audio\", {\n        className: className,\n        preload: preload,\n        src: url,\n        ref: this.elementRef\n      });\n    });\n  }\n\n  componentDidMount() {\n    const defaultOptions = Object.keys(_defaultProps.default).reduce((acc, current) => _objectSpread({}, acc, {\n      [current]: this.props[current]\n    }), {});\n\n    const options = _objectSpread({}, defaultOptions, {\n      muted: this.state.muted\n    });\n\n    const node = this.elementRef.current;\n    this.player = node ? new _plyr.default(node, options) : null;\n\n    if (this.player) {\n      this.player.on('ready', () => {\n        this.props.onReady && this.props.onReady(this.player); // TODO: workaround for autoplay in Youtube\n        // https://github.com/sampotts/plyr/issues/1185\n\n        if (this.props.autoplay) {\n          this.player.play();\n        }\n      });\n      this.player.on('play', () => {\n        this.props.onPlay && this.props.onPlay();\n      });\n      this.player.on('pause', () => {\n        this.props.onPause && this.props.onPause();\n      });\n      this.player.on('ended', () => {\n        this.props.onEnd && this.props.onEnd();\n      });\n      this.player.on('loadeddata', () => {\n        this.props.onLoadedData && this.props.onLoadedData();\n      });\n      this.player.on('seeked', () => {\n        const time = this.getCurrentTime();\n        this.props.onSeeked && this.props.onSeeked(time);\n      });\n      this.player.on('ratechange', () => {\n        const speed = this.player.speed;\n        this.props.onRateChange && this.props.onRateChange(speed);\n      });\n      this.player.on('timeupdate', () => {\n        const time = this.getCurrentTime();\n        this.props.onTimeUpdate && this.props.onTimeUpdate(time);\n      });\n      this.player.on('enterfullscreen', () => {\n        this.props.onEnterFullscreen && this.props.onEnterFullscreen();\n      });\n      this.player.on('exitfullscreen', () => {\n        this.props.onExitFullscreen && this.props.onExitFullscreen();\n      });\n      this.player.on('volumechange', () => {\n        const _this$player = this.player,\n              muted = _this$player.muted,\n              volume = _this$player.volume;\n        this.props.onVolumeChange && this.props.onVolumeChange({\n          muted,\n          volume\n        });\n      });\n      this.player.on('languagechange', () => {\n        const language = this.player.language;\n        this.props.onLanguageChange && this.props.onLanguageChange(language);\n      });\n      this.player.on('controlshidden', () => {\n        this.props.onControlsHidden && this.props.onControlsHidden();\n      });\n      this.player.on('controlsshown', () => {\n        this.props.onControlsShown && this.props.onControlsShown();\n      });\n      this.player.on('captionsenabled', () => {\n        this.props.onCaptionsEnabled && this.props.onCaptionsEnabled();\n      });\n      this.player.on('captionsdisabled', () => {\n        this.props.onCaptionsDisabled && this.props.onCaptionsDisabled();\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.muted !== this.props.muted) {\n      this.player.muted = this.props.muted;\n    }\n\n    if (prevProps.videoId !== this.props.videoId) {\n      this.props.videoId && this.updateVideoSource(this.props.videoId, this.props.provider);\n    }\n  }\n\n  componentWillUnmount() {\n    this.player && this.player.destroy();\n  }\n\n  render() {\n    if (this.props.type === 'audio') {\n      return this.renderAudioPlayer();\n    } else if (this.props.type === 'video') {\n      return this.renderPlayerWithSRC();\n    }\n\n    return this.renderPlayerWithVideoId();\n  }\n\n}\n\n_defineProperty(Plyr, \"getDerivedStateFromProps\", nextProps => ({\n  muted: nextProps.muted\n}));\n\n_defineProperty(Plyr, \"defaultProps\", _objectSpread({\n  type: 'youtube',\n  // className: 'react-plyr',\n  tracks: []\n}, _defaultProps.default));\n\n_defineProperty(Plyr, \"propTypes\", {\n  type: _propTypes.default.oneOf(['youtube', 'vimeo', 'video', 'audio']),\n  // className: PropTypes.string,\n  videoId: _propTypes.default.string,\n  url: _propTypes.default.string,\n  onReady: _propTypes.default.func,\n  onPlay: _propTypes.default.func,\n  onPause: _propTypes.default.func,\n  onEnd: _propTypes.default.func,\n  onLoadedData: _propTypes.default.func,\n  onSeeked: _propTypes.default.func,\n  onRateChange: _propTypes.default.func,\n  onTimeUpdate: _propTypes.default.func,\n  onEnterFullscreen: _propTypes.default.func,\n  onExitFullscreen: _propTypes.default.func,\n  onVolumeChange: _propTypes.default.func,\n  onLanguageChange: _propTypes.default.func,\n  onControlsHidden: _propTypes.default.func,\n  onControlsShown: _propTypes.default.func,\n  onCaptionsEnabled: _propTypes.default.func,\n  onCaptionsDisabled: _propTypes.default.func,\n  // plyr props\n  enabled: _propTypes.default.bool,\n  title: _propTypes.default.string,\n  debug: _propTypes.default.bool,\n  autoplay: _propTypes.default.bool,\n  autopause: _propTypes.default.bool,\n  seekTime: _propTypes.default.number,\n  volume: _propTypes.default.number,\n  muted: _propTypes.default.bool,\n  duration: _propTypes.default.number,\n  displayDuration: _propTypes.default.bool,\n  invertTime: _propTypes.default.bool,\n  toggleInvert: _propTypes.default.bool,\n  ratio: _propTypes.default.string,\n  clickToPlay: _propTypes.default.bool,\n  hideControls: _propTypes.default.bool,\n  resetOnEnd: _propTypes.default.bool,\n  disableContextMenu: _propTypes.default.bool,\n  loadSprite: _propTypes.default.bool,\n  iconPrefix: _propTypes.default.string,\n  iconUrl: _propTypes.default.string,\n  blankVideo: _propTypes.default.string,\n  quality: _propTypes.default.shape({\n    default: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n    options: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]))\n  }),\n  loop: _propTypes.default.shape({\n    active: _propTypes.default.bool\n  }),\n  speed: _propTypes.default.shape({\n    selected: _propTypes.default.number,\n    options: _propTypes.default.arrayOf(_propTypes.default.number)\n  }),\n  keyboard: _propTypes.default.shape({\n    focused: _propTypes.default.bool,\n    global: _propTypes.default.bool\n  }),\n  tooltips: _propTypes.default.shape({\n    controls: _propTypes.default.bool,\n    seek: _propTypes.default.bool\n  }),\n  captions: _propTypes.default.shape({\n    active: _propTypes.default.bool,\n    language: _propTypes.default.string,\n    update: _propTypes.default.bool\n  }),\n  fullscreen: _propTypes.default.shape({\n    enabled: _propTypes.default.bool,\n    fallback: _propTypes.default.bool,\n    iosNative: _propTypes.default.bool\n  }),\n  storage: _propTypes.default.shape({\n    enabled: _propTypes.default.bool,\n    key: _propTypes.default.string\n  }),\n  controls: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.oneOf(['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'settings', 'pip', 'airplay', 'fullscreen'])), _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),\n  settings: _propTypes.default.arrayOf(_propTypes.default.oneOf(['captions', 'quality', 'speed'])),\n  poster: _propTypes.default.string,\n  sources: _propTypes.default.arrayOf(_propTypes.default.shape({\n    src: _propTypes.default.string.isRequired,\n    type: _propTypes.default.string.isRequired,\n    size: _propTypes.default.string\n  })),\n  tracks: _propTypes.default.arrayOf(_propTypes.default.shape({\n    kind: _propTypes.default.string,\n    label: _propTypes.default.string,\n    src: _propTypes.default.string.isRequired,\n    srclang: _propTypes.default.string,\n    default: _propTypes.default.bool,\n    key: _propTypes.default.any\n  }))\n});\n\nvar _default = Plyr;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}